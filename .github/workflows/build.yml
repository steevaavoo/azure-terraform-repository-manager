name: Build

# Workflow reference
# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  # push:
  #   branches: [ develop ]
  # pull_request:
  #   branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Declaring Environment Variables - normally we would include secrets only per-step, rather than globally.
# https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/naming-and-tagging#example-names
# Using Environment Variables to store authentication for AzureRM provider in Terraform
# https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret#configuring-the-service-principal-in-terraform
env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

  PREFIX: "steevaavoo"
  LOCATION: "ukwest"
  SCRIPTS_FOLDER: "./scripts"
  TERRAFORM_FOLDER: "./terraform"
  TERRAFORM_STORAGE_ACCOUNT: "sttfstatepayg001"
  TERRAFORM_STORAGE_CONTAINER_NAME: "terraform"
  TERRAFORM_STORAGE_RG: "rg-tfstate-payg-001"
  TERRAFORM_VERSION: "0.12.29"
  STORAGE_KEY: "DYNAMICALLY UPDATED BY GET_STORAGE_KEY"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check Out code
        uses: actions/checkout@v2

      # Fixing default file permissions and concatenating environment variables
      - name: Init Tasks
        run: |
          chmod --recursive +x ./scripts/
          echo "TF_VAR_prefix=${{ env.PREFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_location=${{ env.LOCATION }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_resourcegroup_name=${{ env.PREFIX }}-rg-aks-dev-001" >> $GITHUB_ENV

      # Azure
      - name: Log in to Azure
        working-directory: ${{ env.SCRIPTS_FOLDER }}
        run: ./azure_login.sh

      - name: Create Storage for Terraform State
        working-directory: ${{ env.SCRIPTS_FOLDER }}
        run: ./create_tfstate_storage.sh

      - name: Get Storage Key
        working-directory: ${{ env.SCRIPTS_FOLDER }}
        run: ./get_storage_key.sh

      # Terraform
      - name: HashiCorp - Setup Terraform
      # You may pin to the exact commit or the version.
      # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
      # ..@v1 will always yield latest version if project has correct hashing of latest stable build to major version
        uses: hashicorp/setup-terraform@v1
        with:
          # The version of Terraform CLI to install. Instead of full version string you can also specify constraint
          # string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint.
          # A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # Store state in backend
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_FOLDER }}
        run: ../${{ env.SCRIPTS_FOLDER }}/terraform_init.sh

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_FOLDER }}
        run: ../${{ env.SCRIPTS_FOLDER }}/terraform_plan.sh

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_FOLDER }}
        run: ../${{ env.SCRIPTS_FOLDER }}/terraform_apply.sh
